<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>八股 on Runqi Blog</title><link>https://runqizhao.cn/tags/%E5%85%AB%E8%82%A1/</link><description>Recent content in 八股 on Runqi Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 07 Sep 2023 15:52:00 +0800</lastBuildDate><atom:link href="https://runqizhao.cn/tags/%E5%85%AB%E8%82%A1/index.xml" rel="self" type="application/rss+xml"/><item><title>汇川一面</title><link>https://runqizhao.cn/p/%E6%B1%87%E5%B7%9D%E4%B8%80%E9%9D%A2/</link><pubDate>Thu, 07 Sep 2023 15:52:00 +0800</pubDate><guid>https://runqizhao.cn/p/%E6%B1%87%E5%B7%9D%E4%B8%80%E9%9D%A2/</guid><description>&lt;p>一些问题的复盘 ，想想自己为什么会被挂&lt;/p>
&lt;p>这个面试时纯八股，因此相当于考验自己八股背的熟不熟。&lt;/p>
&lt;h2 id="请你介绍一下synchronized关键字">
&lt;a href="#%e8%af%b7%e4%bd%a0%e4%bb%8b%e7%bb%8d%e4%b8%80%e4%b8%8bsynchronized%e5%85%b3%e9%94%ae%e5%ad%97">#&lt;/a>
请你介绍一下synchronized关键字
&lt;/h2>&lt;p>这个当时回答的话逻辑存在些问题，当时在介绍的时候逻辑如下：&lt;/p>
&lt;ol>
&lt;li>这个关键字的作用是什么&lt;/li>
&lt;li>为什么会产生这个问题&lt;/li>
&lt;li>使用这个关键字的流程。&lt;/li>
&lt;/ol>
&lt;p>下面将重新系统梳理整体逻辑，包括与Lock的比较。&lt;/p>
&lt;h3 id="synchronized是什么有什么用">
&lt;a href="#synchronized%e6%98%af%e4%bb%80%e4%b9%88%e6%9c%89%e4%bb%80%e4%b9%88%e7%94%a8">#&lt;/a>
synchronized是什么？有什么用？
&lt;/h3>&lt;p>synchronized时Java中的一个关机簪子，翻译中文就是同步的意思。主要解决的就是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只有一个线程执行。&lt;/p>
&lt;p>在Java早期版本中，synchronized关键字属于&lt;strong>重量级锁&lt;/strong>。效率低下。这是因为监视器所时要来与底层操作修通的Mutex Lock实现的，Java的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对较长的时间，时间成本相对较高。&lt;/p>
&lt;p>但是在Java6之后，synchronized引入了大量优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。这使得&lt;code>synchronized&lt;/code>效率得到了提升。&lt;/p>
&lt;p>以上就是一些基本概念，在了解了这些基本概念之后，下面需要介绍如何使用synchronized的使用&lt;/p>
&lt;h3 id="如何使用synchronized">
&lt;a href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8synchronized">#&lt;/a>
如何使用synchronized？
&lt;/h3>&lt;ol>
&lt;li>修饰实例方法&lt;/li>
&lt;li>修饰静态方法&lt;/li>
&lt;li>修饰代码块&lt;/li>
&lt;/ol>
&lt;h4 id="修饰实例方法">
&lt;a href="#%e4%bf%ae%e9%a5%b0%e5%ae%9e%e4%be%8b%e6%96%b9%e6%b3%95">#&lt;/a>
修饰实例方法
&lt;/h4>&lt;p>给当前对象示例加锁，进入同步代码前要获得&lt;strong>当前对象实例的锁&lt;/strong>。&lt;/p>
&lt;h4 id="修饰静态方法">
&lt;a href="#%e4%bf%ae%e9%a5%b0%e9%9d%99%e6%80%81%e6%96%b9%e6%b3%95">#&lt;/a>
修饰静态方法
&lt;/h4>&lt;p>给当前类加锁，作用域类的多有对象实例，进入同步代码块前要&lt;strong>获得当前class锁。&lt;/strong>&lt;/p>
&lt;h4 id="修饰代码块锁定当前类">
&lt;a href="#%e4%bf%ae%e9%a5%b0%e4%bb%a3%e7%a0%81%e5%9d%97%e9%94%81%e5%ae%9a%e5%bd%93%e5%89%8d%e7%b1%bb">#&lt;/a>
修饰代码块（锁定当前类）
&lt;/h4>&lt;p>给当前类进行加锁，会作用域类的所有对象示例，进入统合部代码前要获得当前class锁。&lt;/p>
&lt;h4 id="修饰代码块锁指定对象类">
&lt;a href="#%e4%bf%ae%e9%a5%b0%e4%bb%a3%e7%a0%81%e5%9d%97%e9%94%81%e6%8c%87%e5%ae%9a%e5%af%b9%e8%b1%a1%e7%b1%bb">#&lt;/a>
修饰代码块（锁指定对象/类）
&lt;/h4>&lt;p>对括号里面指定的对象/类加锁：&lt;/p>
&lt;ol>
&lt;li>&lt;code>synchronized(object)&lt;/code>标识进入同步代码库要获得&lt;strong>给定对象的锁。&lt;/strong>&lt;/li>
&lt;li>&lt;code>synchronized(类.class)&lt;/code> 表示进入同步代码前要获得 &lt;strong>给定 Class 的锁&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h4 id="总结">
&lt;a href="#%e6%80%bb%e7%bb%93">#&lt;/a>
总结
&lt;/h4>&lt;p>&lt;code>synchronized&lt;/code> 关键字加到 &lt;code>static&lt;/code> 静态方法和 &lt;code>synchronized(class)&lt;/code> 代码块上都是是给 Class 类上锁；&lt;/p>
&lt;p>&lt;code>synchronized&lt;/code> 关键字加到实例方法上是给对象实例上锁；&lt;/p>
&lt;p>尽量不要使用 &lt;code>synchronized(String a)&lt;/code> 因为 JVM 中，字符串常量池具有缓存功能。&lt;/p>
&lt;h3 id="构造方法可以用synchronized修饰吗">
&lt;a href="#%e6%9e%84%e9%80%a0%e6%96%b9%e6%b3%95%e5%8f%af%e4%bb%a5%e7%94%a8synchronized%e4%bf%ae%e9%a5%b0%e5%90%97">#&lt;/a>
构造方法可以用synchronized修饰吗
&lt;/h3>&lt;p>先说结论：&lt;strong>构造方法不能使用 synchronized 关键字修饰。&lt;/strong>&lt;/p>
&lt;p>构造方法本身就属于线程安全的，不存在同步的构造方法一说。&lt;/p>
&lt;p>重头戏是下面这块&lt;/p>
&lt;h3 id="synchronized底层原理了解吗">
&lt;a href="#synchronized%e5%ba%95%e5%b1%82%e5%8e%9f%e7%90%86%e4%ba%86%e8%a7%a3%e5%90%97">#&lt;/a>
synchronized底层原理了解吗
&lt;/h3>&lt;p>synchronized 关键字底层原理属于 JVM 层面的东西。&lt;/p>
&lt;h4 id="synchronized-同步语句块的情况">
&lt;a href="#synchronized-%e5%90%8c%e6%ad%a5%e8%af%ad%e5%8f%a5%e5%9d%97%e7%9a%84%e6%83%85%e5%86%b5">#&lt;/a>
synchronized 同步语句块的情况
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedDemo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">method&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;synchronized 代码块&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过 JDK 自带的 &lt;code>javap&lt;/code> 命令查看 &lt;code>SynchronizedDemo&lt;/code> 类的相关字节码信息：首先切换到类的对应目录执行 &lt;code>javac SynchronizedDemo.java&lt;/code> 命令生成编译后的 .class 文件，然后执行&lt;code>javap -c -s -v -l SynchronizedDemo.class&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/synchronized-principle.png"
loading="lazy"
alt="synchronized关键字原理"
>&lt;/p>
&lt;p>从上面我们可以看出：synchronized&lt;code>同步语句块的实现使用的是&lt;/code>monitorenter&lt;code>和&lt;/code>monitorexit&lt;code>指令，其中&lt;/code>monitorenter&lt;code> 指令指向同步代码块的开始位置，&lt;/code>monitorexit` 指令则指明同步代码块的结束位置。&lt;/p>
&lt;p>上面的字节码中包含一个 &lt;code>monitorenter&lt;/code> 指令以及两个 &lt;code>monitorexit&lt;/code> 指令，这是为了保证锁在同步代码块代码正常执行以及出现异常的这两种情况下都能被正确释放。&lt;/p>
&lt;p>当执行 &lt;code>monitorenter&lt;/code> 指令时，线程试图获取锁也就是获取 &lt;strong>对象监视器 &lt;code>monitor&lt;/code>&lt;/strong> 的持有权。&lt;/p>
&lt;blockquote>
&lt;p>在 Java 虚拟机(HotSpot)中，Monitor 是基于 C++实现的，由&lt;a class="link" href="https://github.com/openjdk-mirror/jdk7u-hotspot/blob/50bdefc3afe944ca74c3093e7448d6b889cd20d1/src/share/vm/runtime/objectMonitor.cpp" target="_blank" rel="noopener"
>ObjectMonitoropen in new window&lt;/a>实现的。每个对象中都内置了一个 &lt;code>ObjectMonitor&lt;/code>对象。&lt;/p>
&lt;p>另外，&lt;code>wait/notify&lt;/code>等方法也依赖于&lt;code>monitor&lt;/code>对象，这就是为什么只有在同步的块或者方法中才能调用&lt;code>wait/notify&lt;/code>等方法，否则会抛出&lt;code>java.lang.IllegalMonitorStateException&lt;/code>的异常的原因。&lt;/p>
&lt;/blockquote>
&lt;p>在执行&lt;code>monitorenter&lt;/code>时，会尝试获取对象的锁，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。&lt;/p>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/synchronized-get-lock-code-block.png"
loading="lazy"
alt="执行 monitorenter 获取锁"
>&lt;/p>
&lt;p>对象锁的的拥有者线程才可以执行 &lt;code>monitorexit&lt;/code> 指令来释放锁。在执行 &lt;code>monitorexit&lt;/code> 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。&lt;/p>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/synchronized-release-lock-block.png"
loading="lazy"
alt="执行 monitorexit 释放锁"
>&lt;/p>
&lt;p>如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。&lt;/p>
&lt;h4 id="synchronized-修饰方法的的情况">
&lt;a href="#synchronized-%e4%bf%ae%e9%a5%b0%e6%96%b9%e6%b3%95%e7%9a%84%e7%9a%84%e6%83%85%e5%86%b5">#&lt;/a>
synchronized 修饰方法的的情况
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedDemo2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">synchronized&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">method&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;synchronized 方法&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://oss.javaguide.cn/github/javaguide/synchronized%E5%85%B3%E9%94%AE%E5%AD%97%E5%8E%9F%E7%90%862.png"
loading="lazy"
alt="synchronized关键字原理"
>&lt;/p>
&lt;p>&lt;code>synchronized&lt;/code>修饰的方法并没有使用&lt;code>mintorenter&lt;/code>指令和&lt;code>mintorexit&lt;/code>指令。取而代之的却是&lt;code>ACC_SYNCHONIZED&lt;/code>访问表示来判别一个方法是否声明为同步方法，从而执行响应的同步调用。&lt;/p>
&lt;p>如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 class 的锁。&lt;/p>
&lt;h3 id="总结-1">
&lt;a href="#%e6%80%bb%e7%bb%93-1">#&lt;/a>
总结
&lt;/h3>&lt;p>&lt;code>synchronized&lt;/code> 同步语句块的实现使用的是 &lt;code>monitorenter&lt;/code> 和 &lt;code>monitorexit&lt;/code> 指令，其中 &lt;code>monitorenter&lt;/code> 指令指向同步代码块的开始位置，&lt;code>monitorexit&lt;/code> 指令则指明同步代码块的结束位置。&lt;/p>
&lt;p>&lt;code>synchronized&lt;/code> 修饰的方法并没有 &lt;code>monitorenter&lt;/code> 指令和 &lt;code>monitorexit&lt;/code> 指令，取得代之的确实是 &lt;code>ACC_SYNCHRONIZED&lt;/code> 标识，该标识指明了该方法是一个同步方法。&lt;/p>
&lt;p>&lt;strong>不过两者的本质都是对对象监视器 monitor 的获取。&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>以上是参考JavaGuide进行编写的，但是这部分感觉并不是很深入，因此下面从我自己原本的笔记上面进行提炼总结。（主要是从深入理解JVM上面进行总结，因为上面知识简单说明了对应指令的使用，并没有说明）&lt;/p>
&lt;h3 id="moniterentermoniterexit">
&lt;a href="#moniterentermoniterexit">#&lt;/a>
Moniterenter、Moniterexit
&lt;/h3>&lt;p>这两个是JVM指令，主要是基于&lt;code>Mask word&lt;/code>和&lt;code>Object monitor&lt;/code>来实现显得。&lt;/p>
&lt;p>在JVM中，对象在内存中分为三个区域：&lt;/p>
&lt;ol>
&lt;li>对象头&lt;/li>
&lt;li>示例数据&lt;/li>
&lt;li>字节对齐&lt;/li>
&lt;/ol>
&lt;p>下面主要介绍对象头。&lt;/p>
&lt;h4 id="对象头">
&lt;a href="#%e5%af%b9%e8%b1%a1%e5%a4%b4">#&lt;/a>
对象头
&lt;/h4>&lt;p>&lt;!-- raw HTML omitted -->synchronized用的锁是存在Java对象头里的。&lt;!-- raw HTML omitted -->如果对象是数组类型，则虚拟机用3个字宽（Word）存储对象头，如果对象是非数组类型，则用2字宽存储对象头。在32位虚拟机中，1字宽等于4字节，即32bit，如下表所示&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>长度&lt;/th>
&lt;th>内容&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>32/64bit&lt;/td>
&lt;td>Mark word&lt;/td>
&lt;td>存储对象的hashCode或锁信息等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>32/64bit&lt;/td>
&lt;td>Class Metadata Address&lt;/td>
&lt;td>存储对象类型数据的指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>32/64bit&lt;/td>
&lt;td>Array length&lt;/td>
&lt;td>数组的长度（如果当前对象是数组）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Java对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位。32位JVM的Mark Word的默认存储结构如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>锁状态&lt;/th>
&lt;th>25bit&lt;/th>
&lt;th>4bit&lt;/th>
&lt;th>1bit是否是偏向锁&lt;/th>
&lt;th>2bit锁标志&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>无状态锁&lt;/td>
&lt;td>对象的hashCode&lt;/td>
&lt;td>对象分代年龄&lt;/td>
&lt;td>0&lt;/td>
&lt;td>01&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。Mark Word可能变化为存储以下4种数据，如下表所示：&lt;/p>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/20230424111910.png"
loading="lazy"
>&lt;/p>
&lt;p>在64位虚拟机下，Mark Word是64bit大小的，其存储结构如下表所示：&lt;/p>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/20230424111932.png"
loading="lazy"
>&lt;/p>
&lt;p>其实这个的重点就是锁升级与锁对比。&lt;/p>
&lt;p>下面将针对这部分内容进行总结。&lt;/p>
&lt;h3 id="锁升级与对比">
&lt;a href="#%e9%94%81%e5%8d%87%e7%ba%a7%e4%b8%8e%e5%af%b9%e6%af%94">#&lt;/a>
锁升级与对比
&lt;/h3>&lt;p>上面已经说过，从Java6开始，所功能进行升级，将锁划分成了四种状态：&lt;/p>
&lt;ol>
&lt;li>无锁装填&lt;/li>
&lt;li>偏向锁装填&lt;/li>
&lt;li>轻量级锁状态&lt;/li>
&lt;li>重量级状态。&lt;/li>
&lt;/ol>
&lt;p>先说明几个简单的概念：&lt;/p>
&lt;ol>
&lt;li>锁可以升级但是是不可以降级。&lt;/li>
&lt;li>目的是为了条噶获得锁和释放锁的效率。&lt;/li>
&lt;/ol>
&lt;h3 id="偏向锁">
&lt;a href="#%e5%81%8f%e5%90%91%e9%94%81">#&lt;/a>
偏向锁
&lt;/h3>&lt;p>大多数情况下在多线程中，使用锁不存在竞争，并且总是有一个线程进行获得，因此出现了对应的偏向锁。&lt;/p>
&lt;p>偏向锁在进行使用的时候流程如下：&lt;/p>
&lt;ol>
&lt;li>首先当一个线程访问所记录里存储偏向的线程ID。&lt;/li>
&lt;li>第二次进入同步块时不需要进行CAS操作和加锁以及解锁操作。只需要要简单的测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。
&lt;ol>
&lt;li>如果说指向当前对象，则证明已经拿到偏向锁，进行操作。&lt;/li>
&lt;li>如果说没有指向当前对象，那么需要测试一个Mark Word中偏向锁的标识是否视之为1
&lt;ol>
&lt;li>如果没有设置，则使用CAS竞争锁。&lt;/li>
&lt;li>如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>在上面一系列操作之后，需要将偏向锁进行撤销，撤销条件：当其他线程尝试竞争偏向锁是，持有偏向锁的线程才会释放锁。 撤销步骤如下：
&lt;ol>
&lt;li>需要等待全局安全点（这个时间点上没有正在执行的字节码）&lt;/li>
&lt;li>首先暂停又有偏向锁的线程&lt;/li>
&lt;li>检查持有偏向锁是否还活着
&lt;ol>
&lt;li>如果当前线程不属于活动状态，则将当前对象头设置为无所状态。&lt;/li>
&lt;li>如果线程仍然活着，拥有偏向锁的栈将会执行，遍历偏向对象的锁记录，
&lt;ol>
&lt;li>栈中锁记录和对象头的Mark Word要么重新偏向于其他线程&lt;/li>
&lt;li>要么恢复到无锁或者标价对象不适合作为偏向锁。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>最后唤醒线程。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>偏向锁在Java 6和Java 7里是默认启用的，但是它在应用程序启动几秒钟之后才激活，如有必要可以使用JVM参数来关闭延迟：-XX:BiasedLockingStartupDelay=0。如果你确定应用程序里所有的锁通常情况下处于竞争状态，可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，那么程序默认会进入轻量级锁状态。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/20230424134229.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="轻量级锁">
&lt;a href="#%e8%bd%bb%e9%87%8f%e7%ba%a7%e9%94%81">#&lt;/a>
轻量级锁
&lt;/h3>&lt;h4 id="轻量级锁加锁">
&lt;a href="#%e8%bd%bb%e9%87%8f%e7%ba%a7%e9%94%81%e5%8a%a0%e9%94%81">#&lt;/a>
轻量级锁加锁
&lt;/h4>&lt;p>线程执行同步块之前，&lt;/p>
&lt;ol>
&lt;li>JVM会先再当前线程的栈帧中创建用于存储锁记录的空间。&lt;/li>
&lt;li>将对象头中的Mark Word复制到锁记录中，官方称之为Displaced Mark Word。&lt;/li>
&lt;li>线程尝试使用CAS将对象头中Mark Word替换为指向锁记录的指针。
&lt;ol>
&lt;li>如果成功，当前线程获得锁。&lt;/li>
&lt;li>如果失败，表示其他线程竞争所，当前西安测绘给你边长是使用自旋来获取锁。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h4 id="轻量级锁解锁">
&lt;a href="#%e8%bd%bb%e9%87%8f%e7%ba%a7%e9%94%81%e8%a7%a3%e9%94%81">#&lt;/a>
轻量级锁解锁
&lt;/h4>&lt;ol>
&lt;li>使用原子CAS操作将Displaced Mark Word替换回到对象头。
&lt;ol>
&lt;li>如果成功，则表示没有竞争发生。&lt;/li>
&lt;li>如果失败，表示当前锁存在竞争，锁就会膨胀为重量级锁。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://img-1312072469.cos.ap-nanjing.myqcloud.com/20230424134408.png"
loading="lazy"
>&lt;/p>
&lt;p>因为自旋会消耗CPU，为了避免无用的自旋（比如获得锁的线程被阻塞住了），一旦锁升级成重量级锁，就不会再恢复到轻量级锁状态。当锁处于这个状态下，其他线程试图获取锁时，都会被阻塞住，当持有锁的线程释放锁之后会唤醒这些线程，被唤醒的线程就会进行新一轮的夺锁之争。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">锁&lt;/th>
&lt;th style="text-align:left">优点&lt;/th>
&lt;th style="text-align:left">缺点&lt;/th>
&lt;th style="text-align:left">适用场景&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">偏向锁&lt;/td>
&lt;td style="text-align:left">加锁和解锁不需要额外的消耗，和执行非同步方法相比仅存在纳秒级的差距&lt;/td>
&lt;td style="text-align:left">如果线程间存在锁竞争会带来额外的锁撒销的消耗&lt;/td>
&lt;td style="text-align:left">适用于只有一个线程访问同步块场景&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">轻量级锁&lt;/td>
&lt;td style="text-align:left">竞争的线程不会阻塞，提高了程序的响应速度&lt;/td>
&lt;td style="text-align:left">如果始终得不到锁竞争的线程，使用自旋会消耗CPU&lt;/td>
&lt;td style="text-align:left">追求响应时间 同步块执行速度非常快&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">重量级锁&lt;/td>
&lt;td style="text-align:left">县城竞争不使用自旋，不会消耗CPU&lt;/td>
&lt;td style="text-align:left">线程阻塞，响应时间缓慢&lt;/td>
&lt;td style="text-align:left">追求吞吐量 同步块执行速度较长&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>OK，这个问题会带结束，顺带将第二个问题进行回答了，“你知道锁升级的过程吗”&lt;/p>
&lt;h2 id="你知道锁升级的过程吗">
&lt;a href="#%e4%bd%a0%e7%9f%a5%e9%81%93%e9%94%81%e5%8d%87%e7%ba%a7%e7%9a%84%e8%bf%87%e7%a8%8b%e5%90%97">#&lt;/a>
你知道锁升级的过程吗
&lt;/h2>&lt;p>见上&lt;/p>
&lt;h2 id="对于currenthashmap你是怎么理解的">
&lt;a href="#%e5%af%b9%e4%ba%8ecurrenthashmap%e4%bd%a0%e6%98%af%e6%80%8e%e4%b9%88%e7%90%86%e8%a7%a3%e7%9a%84">#&lt;/a>
对于CurrentHashMap你是怎么理解的
&lt;/h2>&lt;p>这个话自己的回答算是70分，说出了锁分段，put和set的过程，这个具体的看笔记，这个记得比较清楚。&lt;/p>
&lt;h2 id="场景题">
&lt;a href="#%e5%9c%ba%e6%99%af%e9%a2%98">#&lt;/a>
场景题
&lt;/h2>&lt;p>核心线程池为4，最大线程数位10，队列大小为10，同时启动6个任务，每个任务10秒，执行多少时间，这个线程池会启动多少个线程来处理任务。&lt;/p>
&lt;p>这个题目就是对线程池的考虑，我回答20秒。&lt;/p>
&lt;p>有一篇很好的文章：https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html 这个文章看懂了这一类问题就没问题了。&lt;/p>
&lt;h2 id="对于threadlocal的理解">
&lt;a href="#%e5%af%b9%e4%ba%8ethreadlocal%e7%9a%84%e7%90%86%e8%a7%a3">#&lt;/a>
对于ThreadLocal的理解
&lt;/h2>&lt;p>这个不是很熟悉。&lt;/p>
&lt;blockquote>
&lt;p>TODO：专门写一篇笔记加深印象。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html" target="_blank" rel="noopener"
>https://javaguide.cn/java/concurrent/java-concurrent-questions-03.html&lt;/a>&lt;/p>
&lt;h2 id="jvm垃圾回收处理器">
&lt;a href="#jvm%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6%e5%a4%84%e7%90%86%e5%99%a8">#&lt;/a>
JVM垃圾回收处理器
&lt;/h2>&lt;p>这个是必须会背的。&lt;/p>
&lt;h2 id="mysql数据库innodedb的存储结构为社么使用这种结构">
&lt;a href="#mysql%e6%95%b0%e6%8d%ae%e5%ba%93innodedb%e7%9a%84%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84%e4%b8%ba%e7%a4%be%e4%b9%88%e4%bd%bf%e7%94%a8%e8%bf%99%e7%a7%8d%e7%bb%93%e6%9e%84">#&lt;/a>
MySQL数据库innodedb的存储结构，为社么使用这种结构
&lt;/h2>&lt;p>个人认为70分。&lt;/p>
&lt;h2 id="mysql中的mvcc">
&lt;a href="#mysql%e4%b8%ad%e7%9a%84mvcc">#&lt;/a>
MySQL中的MVCC
&lt;/h2>&lt;p>0分，感觉这个就是挂了我的主要原因，这个是必会的确回答的细碎。&lt;/p>
&lt;blockquote>
&lt;p>这个需要重点复习总结&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html" target="_blank" rel="noopener"
>https://javaguide.cn/database/mysql/innodb-implementation-of-mvcc.html&lt;/a>&lt;/p>
&lt;h2 id="redis中用到的数据结构">
&lt;a href="#redis%e4%b8%ad%e7%94%a8%e5%88%b0%e7%9a%84%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84">#&lt;/a>
Redis中用到的数据结构
&lt;/h2>&lt;p>这个必会，每个细节都需要会。&lt;/p>
&lt;p>75分。&lt;/p>
&lt;p>&lt;strong>其中zset的运用原理回答的不是很好！！！&lt;/strong>&lt;/p>
&lt;h2 id="redis当中持久化方式">
&lt;a href="#redis%e5%bd%93%e4%b8%ad%e6%8c%81%e4%b9%85%e5%8c%96%e6%96%b9%e5%bc%8f">#&lt;/a>
Redis当中持久化方式
&lt;/h2>&lt;p>70分&lt;/p>
&lt;h2 id="netty的io方式">
&lt;a href="#netty%e7%9a%84io%e6%96%b9%e5%bc%8f">#&lt;/a>
Netty的IO方式
&lt;/h2>&lt;p>0分&lt;/p>
&lt;h2 id="tcp粘包问题如何解决">
&lt;a href="#tcp%e7%b2%98%e5%8c%85%e9%97%ae%e9%a2%98%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3">#&lt;/a>
TCP粘包问题如何解决
&lt;/h2>&lt;p>0分&lt;/p>
&lt;p>这个当时忘了，其实根本不知道&amp;hellip;.&lt;/p>
&lt;p>有空看看https://segmentfault.com/a/1190000039691657&lt;/p>
&lt;h2 id="netty默认启动多少个线程">
&lt;a href="#netty%e9%bb%98%e8%ae%a4%e5%90%af%e5%8a%a8%e5%a4%9a%e5%b0%91%e4%b8%aa%e7%ba%bf%e7%a8%8b">#&lt;/a>
Netty默认启动多少个线程
&lt;/h2>&lt;p>0分&lt;/p>
&lt;h2 id="spring当中数据注入的方式">
&lt;a href="#spring%e5%bd%93%e4%b8%ad%e6%95%b0%e6%8d%ae%e6%b3%a8%e5%85%a5%e7%9a%84%e6%96%b9%e5%bc%8f">#&lt;/a>
Spring当中数据注入的方式
&lt;/h2>&lt;p>100分&lt;/p>
&lt;h2 id="spring当中是线程安全的吗">
&lt;a href="#spring%e5%bd%93%e4%b8%ad%e6%98%af%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e5%90%97">#&lt;/a>
Spring当中是线程安全的吗
&lt;/h2>&lt;p>70分&lt;/p>
&lt;h2 id="分布式锁与线程锁的区别">
&lt;a href="#%e5%88%86%e5%b8%83%e5%bc%8f%e9%94%81%e4%b8%8e%e7%ba%bf%e7%a8%8b%e9%94%81%e7%9a%84%e5%8c%ba%e5%88%ab">#&lt;/a>
分布式锁与线程锁的区别
&lt;/h2>&lt;p>20分。。。&lt;/p>
&lt;p>结束&lt;/p>
&lt;h2 id="总结-2">
&lt;a href="#%e6%80%bb%e7%bb%93-2">#&lt;/a>
总结
&lt;/h2>&lt;p>到后面Netty开始全盘崩。&lt;/p>
&lt;p>对于Redis 常见的背会。&lt;/p>
&lt;p>Netty也需要背会。&lt;/p>
&lt;p>Spring中一些常见的需要背会。&lt;/p>
&lt;p>这一面有点类似于kpi面。。。。但是可能确实是后面崩了。。。。&lt;/p></description></item></channel></rss>